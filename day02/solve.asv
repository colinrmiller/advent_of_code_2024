% Solve day 2 part 1
% https://adventofcode.com/2024/day/2
addpath('../helpers');
import helpers.*;
% reader = FileReaderHelper();

% function [rowLen, colLen] = readFileLength(filename)
%     fileID = fopen(filename, 'r');
%     rowLen = 0;
%     colLen = 0;
% 
%     while ~feof(fileID)
%         % TODO: overcounting by each char of line instead of by each number
%         line = fgetl(fileID);
% 
%         rowLen = rowLen + 1;
%         colLen = max(colLen, strlength(line));
%     end
% 
%     fclose(fileID);
% end
% 
% function [array] = updateArrayRow(array, row, value)
%     arrayColLen = size(array, 2);
%     newValue = value;
%     for i=1:(arrayColLen - size(value,2))
%         newValue = [newValue 0];
%     end
%     array(row, :) = newValue;
% end
% 
% function [input] = read_input(filename)
%     [rowLen, colLen] = readFileLength(filename);
% 
%     fileID = fopen(filename, 'r');
% 
%     input = zeros(rowLen, colLen);
%     rowIndex = 1;
% 
%     while ~feof(fileID)
%         line = fgetl(fileID);
% 
%         % input(rowIndex) = str2num(line);
%         newLine = str2num(line);
%         input = updateArrayRow(input, rowIndex, newLine);
% 
%         rowIndex = rowIndex + 1;
%     end
% 
%     fclose(fileID);
% end
% 

function [isSafe, isAscending, isDescending, hasProperJumps] = checkSafety(value, nextValue, isAscending, isDescending, hasProperJumps)
    if nextValue > value
        isDescending = false;
    end
    if nextValue < value
        isAscending = false;
    end
    if (abs(nextValue - value) < 1) || (abs(nextValue - value) > 3)
        hasProperJumps = false;
    end

    isSafe = ~((~isDescending & ~isAscending) | ~hasProperJumps);
end

function [answer] = partA()
    input = FileReaderHelper.read_input("test.txt");
    answer = 0;

    for i=1:size(input, 1)
        isSafe = true;
        isAscending = true;
        isDescending = true;
        hasProperJumps = true; % each sequential pair is 1-3 apart
        value = input(i, 1);
        
        for j=2:size(input, 2)
            if ~isSafe
                break;
            end

            nextValue = input(i, j);
            if nextValue == 0
                 break;
            end

            [isSafe, isAscending, isDescending, hasProperJumps] = checkSafety(value, nextValue, isAscending, isDescending, hasProperJumps);

            value = nextValue;
        end

        if isSafe
            answer = answer + 1;
        end
    end
end

function [answer] = partB()
    input = FileReaderHelper.read_input("test.txt");
    answer = 0;

    for i=1:size(input, 1)
        isSafe = true;
        isAscending = true;
        isDescending = true;
        hasProperJumps = true; % each sequential pair is 1-3 apart
        hasRemovedValue = false;

        value = input(i, 1);
        
        for j=2:size(input, 2)
            if ~isSafe
                break;
            end
            
            nextValue = input(i, j);
            if nextValue == 0
                 break;
            end

            [isSafe, isAscending, isDescending, hasProperJumps] = checkSafety(value, nextValue, isAscending, isDescending, hasProperJumps);

            if ~isSafe & ~hasRemovedValue
                j = j + 1;
                nextValue = input(i, j);

                if nextValue == 0 % if the last value can be removed, then it's safe
                    isSafe = true;
                    break;
                else % skip the erring value and try again
                    [isSafe, isAscending, isDescending, hasProperJumps] = checkSafety(value, nextValue, isAscending, isDescending, hasProperJumps);
                    hasRemovedValue = true;
                end
    
            end
            value = nextValue;
        end

        if isSafe
            answer = answer + 1;
        end
    end
end


disp(partA());
disp(partB());